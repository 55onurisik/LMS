REACT NATIVE PROJESİ KURULUM VE ENTEGRASYON ADIMLARI
============================================

1. Gerekli Paketlerin Kurulumu
-----------------------------
npm install axios
npm install @react-navigation/native
npm install @react-navigation/native-stack
npm install @react-navigation/bottom-tabs
npm install @react-native-async-storage/async-storage
npm install react-native-safe-area-context
npm install react-native-screens
npm install react-native-device-info

2. API Entegrasyonu
------------------
src/api/index.js dosyası oluştur ve aşağıdaki kodu ekle:

import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import DeviceInfo from 'react-native-device-info';

// Platform bazlı API URL yapılandırması
const getBaseUrl = async () => {
  const isEmulator = await DeviceInfo.isEmulator();
  const platform = await DeviceInfo.getSystemName();

  if (isEmulator) {
    if (platform === 'iOS') {
      return 'http://127.0.0.1:8000/api'; // iOS simülatörü için
    } else {
      return 'http://10.0.2.2:8000/api'; // Android emülatörü için
    }
  } else {
    return 'http://your-production-api-url/api'; // Gerçek cihazlar için
  }
};

const api = axios.create({
  baseURL: await getBaseUrl(),
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// Token'ı AsyncStorage'dan alıp header'a ekleyen interceptor
api.interceptors.request.use(async (config) => {
  const token = await AsyncStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Hata yönetimi için interceptor
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      // Token geçersiz veya süresi dolmuş
      await AsyncStorage.removeItem('token');
      // Kullanıcıyı login ekranına yönlendir
      // Bu kısım navigation context kullanılarak yapılabilir
    }
    return Promise.reject(error);
  }
);

export const authAPI = {
  register: async (userData) => {
    const response = await api.post('/register', userData);
    await AsyncStorage.setItem('token', response.data.token);
    return response.data;
  },

  login: async (credentials) => {
    const response = await api.post('/login', credentials);
    await AsyncStorage.setItem('token', response.data.token);
    return response.data;
  },

  logout: async () => {
    const response = await api.post('/logout');
    await AsyncStorage.removeItem('token');
    return response.data;
  },

  getCurrentUser: async () => {
    const response = await api.get('/user');
    return response.data;
  },
};

export default api;

3. Navigation Yapısı
-------------------
src/navigation/index.js dosyası oluştur:

import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

// Screens
import LoginScreen from '../screens/LoginScreen';
import RegisterScreen from '../screens/RegisterScreen';
import HomeScreen from '../screens/HomeScreen';
import ProfileScreen from '../screens/ProfileScreen';

const Stack = createNativeStackNavigator();
const Tab = createBottomTabNavigator();

const MainTabs = () => {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Profile" component={ProfileScreen} />
    </Tab.Navigator>
  );
};

const Navigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen 
          name="Login" 
          component={LoginScreen} 
          options={{ headerShown: false }}
        />
        <Stack.Screen 
          name="Register" 
          component={RegisterScreen} 
          options={{ headerShown: false }}
        />
        <Stack.Screen 
          name="MainApp" 
          component={MainTabs} 
          options={{ headerShown: false }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default Navigation;

4. Ekranların Oluşturulması
--------------------------
src/screens/LoginScreen.js:

import React, { useState } from 'react';
import { View, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { authAPI } from '../api';

const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    try {
      await authAPI.login({ email, password });
      navigation.replace('MainApp');
    } catch (error) {
      Alert.alert('Hata', 'Giriş başarısız. Lütfen bilgilerinizi kontrol edin.');
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
      />
      <TextInput
        style={styles.input}
        placeholder="Şifre"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title="Giriş Yap" onPress={handleLogin} />
      <Button
        title="Kayıt Ol"
        onPress={() => navigation.navigate('Register')}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  input: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ddd',
    marginBottom: 10,
    padding: 10,
    borderRadius: 5,
  },
});

export default LoginScreen;

src/screens/RegisterScreen.js:

import React, { useState } from 'react';
import { View, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { authAPI } from '../api';

const RegisterScreen = ({ navigation }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleRegister = async () => {
    try {
      await authAPI.register({ name, email, password });
      navigation.replace('MainApp');
    } catch (error) {
      Alert.alert('Hata', 'Kayıt başarısız. Lütfen bilgilerinizi kontrol edin.');
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Ad Soyad"
        value={name}
        onChangeText={setName}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
      />
      <TextInput
        style={styles.input}
        placeholder="Şifre"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title="Kayıt Ol" onPress={handleRegister} />
      <Button
        title="Giriş Yap"
        onPress={() => navigation.navigate('Login')}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  input: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ddd',
    marginBottom: 10,
    padding: 10,
    borderRadius: 5,
  },
});

export default RegisterScreen;

5. App.js Düzenlemesi
--------------------
import React from 'react';
import Navigation from './src/navigation';
import { SafeAreaProvider } from 'react-native-safe-area-context';

const App = () => {
  return (
    <SafeAreaProvider>
      <Navigation />
    </SafeAreaProvider>
  );
};

export default App;

6. Önemli Notlar
---------------
- API_URL'yi platform ve ortama göre doğru şekilde yapılandırın:
  * iOS simülatörü için: http://127.0.0.1:8000/api
  * Android emülatörü için: http://10.0.2.2:8000/api
  * Gerçek cihazlar için: http://your-production-api-url/api
- AsyncStorage kullanımı için gerekli izinleri ekleyin
- iOS için Info.plist'e gerekli izinleri ekleyin:
  * NSAppTransportSecurity ayarları
  * Local network erişim izinleri
- Android için AndroidManifest.xml'e gerekli izinleri ekleyin:
  * INTERNET izni
  * ACCESS_NETWORK_STATE izni
- API isteklerinde hata yönetimini geliştirin
- Token yenileme mekanizması ekleyin
- Loading state'leri ekleyin
- Form validasyonları ekleyin
- UI/UX iyileştirmeleri yapın
- CORS ve Sanctum ayarlarını production ortamına göre güncelleyin
- Farklı port kullanıyorsanız API_URL'yi ona göre güncelleyin
- Network hatalarını kullanıcıya anlaşılır şekilde gösterin
- Offline durumları yönetin
- Token'ın geçerlilik süresini kontrol edin
- Güvenli token saklama yöntemleri kullanın

7. Test Edilmesi Gereken Senaryolar
----------------------------------
- Kayıt işlemi
- Giriş işlemi
- Çıkış işlemi
- Token kontrolü
- Hata durumları
- Offline durumlar
- Form validasyonları
- Navigation akışı 